__whitespace={" ":!0,"\t":!0,"\n":!0,"\f":!0,"\r":!0},difflib={defaultJunkFunction:function(t){return __whitespace.hasOwnProperty(t)},stripLinebreaks:function(t){return t.replace(/^[\n\r]*|[\n\r]*$/g,"")},stringAsLines:function(t){for(var i=t.indexOf("\n"),n=t.indexOf("\r"),e=t.split(-1<i&&-1<n||n<0?"\n":"\r"),s=0;s<e.length;s++)e[s]=difflib.stripLinebreaks(e[s]);return e},__reduce:function(t,i,n){if(null!=n)var e=n,s=0;else{if(!i)return null;e=i[0],s=1}for(;s<i.length;s++)e=t(e,i[s]);return e},__ntuplecomp:function(t,i){for(var n=Math.max(t.length,i.length),e=0;e<n;e++){if(t[e]<i[e])return-1;if(t[e]>i[e])return 1}return t.length==i.length?0:t.length<i.length?-1:1},__calculate_ratio:function(t,i){return i?2*t/i:1},__isindict:function(i){return function(t){return i.hasOwnProperty(t)}},__dictget:function(t,i,n){return t.hasOwnProperty(i)?t[i]:n},SequenceMatcher:function(t,i,n){this.set_seqs=function(t,i){this.set_seq1(t),this.set_seq2(i)},this.set_seq1=function(t){t!=this.a&&(this.a=t,this.matching_blocks=this.opcodes=null)},this.set_seq2=function(t){t!=this.b&&(this.b=t,this.matching_blocks=this.opcodes=this.fullbcount=null,this.__chain_b())},this.__chain_b=function(){for(var t=this.b,i=t.length,n=this.b2j={},e={},s=0;s<t.length;s++){var h,r=t[s];n.hasOwnProperty(r)?(h=n[r],200<=i&&100*h.length>i?(e[r]=1,delete n[r]):h.push(s)):n[r]=[s]}for(r in e)e.hasOwnProperty(r)&&delete n[r];var l=this.isjunk,u={};if(l){for(var r in e)e.hasOwnProperty(r)&&l(r)&&(u[r]=1,delete e[r]);for(var r in n)n.hasOwnProperty(r)&&l(r)&&(u[r]=1,delete n[r])}this.isbjunk=difflib.__isindict(u),this.isbpopular=difflib.__isindict(e)},this.find_longest_match=function(t,i,n,e){for(var s,h=this.a,r=this.b,l=this.b2j,u=this.isbjunk,o=t,a=n,c=0,f={},_=[],b=t;b<i;b++){var g,p={},d=difflib.__dictget(l,h[b],_);for(g in d)if(d.hasOwnProperty(g)&&!((s=d[g])<n)){if(e<=s)break;p[s]=k=difflib.__dictget(f,s-1,0)+1,k>c&&(o=b-k+1,a=s-k+1,c=k)}f=p}for(;t<o&&n<a&&!u(r[a-1])&&h[o-1]==r[a-1];)o--,a--,c++;for(;o+c<i&&a+c<e&&!u(r[a+c])&&h[o+c]==r[a+c];)c++;for(;t<o&&n<a&&u(r[a-1])&&h[o-1]==r[a-1];)o--,a--,c++;for(;o+c<i&&a+c<e&&u(r[a+c])&&h[o+c]==r[a+c];)c++;return[o,a,c]},this.get_matching_blocks=function(){if(null!=this.matching_blocks)return this.matching_blocks;for(var t,i,n,e,s,h,r,l,u=this.a.length,o=this.b.length,a=[[0,u,0,o]],c=[];a.length;)t=(e=a.pop())[0],i=e[1],n=e[2],e=e[3],s=(l=this.find_longest_match(t,i,n,e))[0],h=l[1],(r=l[2])&&(c.push(l),t<s&&n<h&&a.push([t,s,n,h]),s+r<i&&h+r<e&&a.push([s+r,i,h+r,e]));c.sort(difflib.__ntuplecomp);var f,_=j1=k1=block=0,b=[];for(f in c)c.hasOwnProperty(f)&&(block=c[f],i2=block[0],j2=block[1],k2=block[2],_+k1==i2&&j1+k1==j2?k1+=k2:(k1&&b.push([_,j1,k1]),_=i2,j1=j2,k1=k2));return k1&&b.push([_,j1,k1]),b.push([u,o,0]),this.matching_blocks=b,this.matching_blocks},this.get_opcodes=function(){if(null!=this.opcodes)return this.opcodes;var t,i,n,e,s,h=0,r=0,l=[],u=(this.opcodes=l,this.get_matching_blocks());for(s in u)u.hasOwnProperty(s)&&(t=(n=u[s])[0],i=n[1],n=n[2],e="",h<t&&r<i?e="replace":h<t?e="delete":r<i&&(e="insert"),e&&l.push([e,h,t,r,i]),h=t+n,r=i+n,n&&l.push(["equal",t,h,i,r]));return l},this.get_grouped_opcodes=function(t){t=t||3;var i,n,e,s,h,r,l,u=this.get_opcodes(),o=("equal"==(u=u||[["equal",0,1,0,1]])[0][0]&&(n=(i=u[0])[0],e=i[1],s=i[2],h=i[3],r=i[4],u[0]=[n,Math.max(e,s-t),s,Math.max(h,r-t),r]),"equal"==u[u.length-1][0]&&(n=(i=u[u.length-1])[0],e=i[1],s=i[2],h=i[3],r=i[4],u[u.length-1]=[n,e,Math.min(s,e+t),h,Math.min(r,h+t)]),t+t),a=[],c=[];for(l in u)u.hasOwnProperty(l)&&(n=(i=u[l])[0],e=i[1],s=i[2],h=i[3],r=i[4],"equal"==n&&o<s-e&&(a.push([n,e,Math.min(s,e+t),h,Math.min(r,h+t)]),c.push(a),a=[],e=Math.max(e,s-t),h=Math.max(h,r-t)),a.push([n,e,s,h,r]));return!a||1==a.length&&"equal"==a[0][0]||c.push(a),c},this.ratio=function(){return matches=difflib.__reduce(function(t,i){return t+i[i.length-1]},this.get_matching_blocks(),0),difflib.__calculate_ratio(matches,this.a.length+this.b.length)},this.quick_ratio=function(){var t;if(null==this.fullbcount){this.fullbcount=n={};for(var i=0;i<this.b.length;i++)n[t=this.b[i]]=difflib.__dictget(n,t,0)+1}for(var n=this.fullbcount,e={},s=difflib.__isindict(e),h=numb=0,i=0;i<this.a.length;i++)t=this.a[i],numb=s(t)?e[t]:difflib.__dictget(n,t,0),e[t]=numb-1,0<numb&&h++;return difflib.__calculate_ratio(h,this.a.length+this.b.length)},this.real_quick_ratio=function(){var t=this.a.length,i=this.b.length;return _calculate_ratio(Math.min(t,i),t+i)},this.isjunk=n||difflib.defaultJunkFunction,this.a=this.b=null,this.set_seqs(t,i)}};